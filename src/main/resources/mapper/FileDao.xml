<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.skyisbule.print.dao.FileDao">
  <resultMap id="BaseResultMap" type="com.github.skyisbule.print.domain.DbFile">
    <id column="fid" jdbcType="INTEGER" property="fid" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="file_name" jdbcType="VARCHAR" property="fileName" />
    <result column="file_url" jdbcType="VARCHAR" property="fileUrl" />
    <result column="upload_time" jdbcType="DATE" property="uploadTime" />
    <result column="is_public" jdbcType="INTEGER" property="isPublic" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fid, `uid`, file_name, file_url, upload_time, is_public
  </sql>
  <select id="selectByExample" parameterType="com.github.skyisbule.print.domain.DbFileExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from db_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from db_file
    where fid = #{fid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from db_file
    where fid = #{fid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.skyisbule.print.domain.DbFileExample">
    delete from db_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="fid" keyProperty="fid" parameterType="com.github.skyisbule.print.domain.DbFile" useGeneratedKeys="true">
    insert into db_file (`uid`, file_name, file_url, 
      upload_time, is_public)
    values (#{uid,jdbcType=INTEGER}, #{fileName,jdbcType=VARCHAR}, #{fileUrl,jdbcType=VARCHAR}, 
      #{uploadTime,jdbcType=DATE}, #{isPublic,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="fid" keyProperty="fid" parameterType="com.github.skyisbule.print.domain.DbFile" useGeneratedKeys="true">
    insert into db_file
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        `uid`,
      </if>
      <if test="fileName != null">
        file_name,
      </if>
      <if test="fileUrl != null">
        file_url,
      </if>
      <if test="uploadTime != null">
        upload_time,
      </if>
      <if test="isPublic != null">
        is_public,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileUrl != null">
        #{fileUrl,jdbcType=VARCHAR},
      </if>
      <if test="uploadTime != null">
        #{uploadTime,jdbcType=DATE},
      </if>
      <if test="isPublic != null">
        #{isPublic,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.skyisbule.print.domain.DbFileExample" resultType="java.lang.Long">
    select count(*) from db_file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update db_file
    <set>
      <if test="record.fid != null">
        fid = #{record.fid,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        `uid` = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.fileName != null">
        file_name = #{record.fileName,jdbcType=VARCHAR},
      </if>
      <if test="record.fileUrl != null">
        file_url = #{record.fileUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.uploadTime != null">
        upload_time = #{record.uploadTime,jdbcType=DATE},
      </if>
      <if test="record.isPublic != null">
        is_public = #{record.isPublic,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update db_file
    set fid = #{record.fid,jdbcType=INTEGER},
      `uid` = #{record.uid,jdbcType=INTEGER},
      file_name = #{record.fileName,jdbcType=VARCHAR},
      file_url = #{record.fileUrl,jdbcType=VARCHAR},
      upload_time = #{record.uploadTime,jdbcType=DATE},
      is_public = #{record.isPublic,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.skyisbule.print.domain.DbFile">
    update db_file
    <set>
      <if test="uid != null">
        `uid` = #{uid,jdbcType=INTEGER},
      </if>
      <if test="fileName != null">
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileUrl != null">
        file_url = #{fileUrl,jdbcType=VARCHAR},
      </if>
      <if test="uploadTime != null">
        upload_time = #{uploadTime,jdbcType=DATE},
      </if>
      <if test="isPublic != null">
        is_public = #{isPublic,jdbcType=INTEGER},
      </if>
    </set>
    where fid = #{fid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.skyisbule.print.domain.DbFile">
    update db_file
    set `uid` = #{uid,jdbcType=INTEGER},
      file_name = #{fileName,jdbcType=VARCHAR},
      file_url = #{fileUrl,jdbcType=VARCHAR},
      upload_time = #{uploadTime,jdbcType=DATE},
      is_public = #{isPublic,jdbcType=INTEGER}
    where fid = #{fid,jdbcType=INTEGER}
  </update>
</mapper>